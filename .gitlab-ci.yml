stages:
  - build
  - deploy
  - destroy

variables:
  PROD_NAMESPACE: production-frontend
  DEV_NAMESPACE: development-frontend
  IMAGE: $CI_REGISTRY_IMAGE
  HELM_RELEASE: sentence-$CI_PROJECT_NAME

Build image:
  stage: build
  image: docker:20
  only:
    refs:
      - development
  services:
    - docker:20-dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker image pull ${IMAGE}:latest || true 
    - >
      docker build 
      --pull 
      --cache-from ${IMAGE}:latest 
      --tag ${IMAGE}:$CI_COMMIT_SHA
      .
    - docker push ${IMAGE}:$CI_COMMIT_SHA

Build latest:
  image: docker:20
  services:
    - docker:20-dind
  variables:
    GIT_STRATEGY: none
  stage: build
  only:
    refs:
      - main
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $IMAGE:$CI_COMMIT_SHA
    - docker tag $IMAGE:$CI_COMMIT_SHA $IMAGE:latest
    - docker push $IMAGE:latest

Deploy review:
  stage: deploy
  only:
    refs:
      - development
  environment: 
    name: aks/development
    kubernetes:
      namespace: $DEV_NAMESPACE
  image: dtzar/helm-kubectl:3.5.0
  before_script:
    - chmod go-r ${KUBECONFIG}  #Fix permissions to non-group/world
  script:
    - kubectl get namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"
    - kubectl create secret -n "$KUBE_NAMESPACE" docker-registry "gitlab-registry-${CI_PROJECT_PATH_SLUG}" --docker-server="$CI_REGISTRY" --docker-username="${CI_DEPLOY_USER:-$CI_REGISTRY_USER}" --docker-password="${CI_DEPLOY_PASSWORD:-$CI_REGISTRY_PASSWORD}" --docker-email="$GITLAB_USER_EMAIL" --dry-run=client -o yaml | kubectl replace -n "$KUBE_NAMESPACE" --force -f -
    - >
      helm upgrade --install $HELM_RELEASE ./chart -n $KUBE_NAMESPACE 
      --set image.repository=${IMAGE} 
      --set image.tag=latest  
      --set imagePullSecret=gitlab-registry-${CI_PROJECT_PATH_SLUG} 
      --set image.env.NAMESPACE=production-api 
      --set image.env.PREFIX=sentence
      --set virtualServer.ingressClassName="nginx-dev"
      --set virtualServer.host="sentence-dev.$(kubectl -n ingress-nginx-dev get service ingress-nginx-dev -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || true).nip.io"

Deploy Production:
  stage: deploy
  only:
    refs:
      - main
  environment: 
    name: aks/production
    kubernetes:
      namespace: $PROD_NAMESPACE
  image: dtzar/helm-kubectl:3.5.0
  before_script:
    - chmod go-r ${KUBECONFIG}  #Fix permissions to non-group/world
  script:
    - kubectl get namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"
    - kubectl create secret -n "$KUBE_NAMESPACE" docker-registry "gitlab-registry-${CI_PROJECT_PATH_SLUG}" --docker-server="$CI_REGISTRY" --docker-username="${CI_DEPLOY_USER:-$CI_REGISTRY_USER}" --docker-password="${CI_DEPLOY_PASSWORD:-$CI_REGISTRY_PASSWORD}" --docker-email="$GITLAB_USER_EMAIL" --dry-run=client -o yaml | kubectl replace -n "$KUBE_NAMESPACE" --force -f -
    - >
      helm upgrade --install $HELM_RELEASE ./chart -n $KUBE_NAMESPACE 
      --set image.repository=${IMAGE} 
      --set image.tag=latest 
      --set imagePullSecret=gitlab-registry-${CI_PROJECT_PATH_SLUG} 
      --set image.env.NAMESPACE=production-api 
      --set image.env.PREFIX=sentence
      --set virtualServer.host="sentence.$(kubectl -n ingress-nginx-prod get service ingress-nginx-prod -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || true).nip.io"


Destroy Review NGINX Plus Ingress:
  stage: destroy
  image: 
    name: dtzar/helm-kubectl:3.5.0
  before_script:
    - chmod go-r ${KUBECONFIG}  #Fix permissions to non-group/world
  script:
    - helm uninstall $HELM_RELEASE -n $KUBE_NAMESPACE
  when: manual
  only:
    refs:
      - development
  environment:
    name: aks/development
    kubernetes:
      namespace: $DEV_NAMESPACE
    action: stop

Destroy Production NGINX Plus Ingress:
  stage: destroy
  only:
    refs:
      - main
  image: 
    name: dtzar/helm-kubectl:3.5.0
  before_script:
    - chmod go-r ${KUBECONFIG}  #Fix permissions to non-group/world
  script:
    - helm uninstall $HELM_RELEASE -n $KUBE_NAMESPACE
  when: manual 
  environment:
    name: aks/production
    kubernetes:
      namespace: $PROD_NAMESPACE
    action: stop
